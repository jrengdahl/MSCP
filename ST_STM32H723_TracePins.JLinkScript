/***********************************************************************
*                    SEGGER Microcontroller GmbH                       *
*                        The Embedded Experts                          *
************************************************************************
*                                                                      *
*                  (c) SEGGER Microcontroller GmbH                     *
*                        All rights reserved                           *
*                          www.segger.com                              *
*                                                                      *
************************************************************************
*                                                                      *
************************************************************************
*                                                                    *
* Licensing terms                                                    *
*                                                                    *
*                                                                    *
* Redistribution and use in source and binary forms, with or         *
* without modification, are permitted provided that the following    *
* condition is met:                                                  *
*                                                                    *
* o Redistributions of source code must retain the above copyright   *
*   notice, this condition and the following disclaimer.             *
*                                                                    *
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
* CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
* INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
* MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
* DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
* ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
* OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
* OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
* LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
* USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
* DAMAGE.                                                            *
*                                                                    *
************************************************************************

Modified for STM32H503RB, May 2, 2023, by Jonathan Engdahl.

-------------------------- END-OF-HEADER -----------------------------

Purpose: Examplescript to modify TracePortWidth and Pin init
Literature:
  [1]  J-Link User Guide

Additional information:
  For more information about public functions that can be implemented in order to customize J-Link actions, please refer to [1]
*/

/*********************************************************************
*
*       Constants (similar to defines)
*
**********************************************************************
*/

/*********************************************************************
*
*       Global functions
*
**********************************************************************
*/


/*********************************************************************
*
*       SetupTracePin -- Setup one pin for trace output
*       Args: GPIO_BASE -- the base addres of the GPIO containing the pin
*             PIN       -- the pin number
*       Return: none
**********************************************************************
*/

void SetupTracePin(U32 GPIO_BASE, U32 PIN)
    {
    U32 MODER_OFF;
    U32 PUPDR_OFF;
    U32 OSPEEDR_OFF;
    U32 AFRL_OFF;
    U32 Edge;
    U32 v;

    MODER_OFF     = 0x00;
    OSPEEDR_OFF   = 0x08;
    PUPDR_OFF     = 0x0C;
    AFRL_OFF      = 0x20;

    // Set drivestrength 
    // 0: Low speed
    // 1: Medium speed
    // 2: High speed
    // 3: Very high speed
    Edge = 3;

    v  =  JLINK_MEM_ReadU32(GPIO_BASE + MODER_OFF);
    v  &= ~(3 << (2 * PIN));               // Mask Mode register
    v  |= (2 << (2 * PIN));                // Set alt function mode
    JLINK_MEM_WriteU32(GPIO_BASE + MODER_OFF, v);

    v  =  JLINK_MEM_ReadU32(GPIO_BASE + PUPDR_OFF);
    v  &= ~(3 << (2 * PIN));               // Mask PUP register
    v  |= (1 << (2 * PIN));                // Set PUP register (Pullup)
    JLINK_MEM_WriteU32(GPIO_BASE + PUPDR_OFF, v);

    v  =  JLINK_MEM_ReadU32(GPIO_BASE + OSPEEDR_OFF);
    v  &= ~(3 << (2 * PIN));               // Mask OSPEED register
    v  |= (Edge << (2 * PIN));             // Set OSPEED register (very high speed)
    JLINK_MEM_WriteU32(GPIO_BASE + OSPEEDR_OFF, v);

    v  =  JLINK_MEM_ReadU32(GPIO_BASE + AFRL_OFF + ((PIN>>3)<<2));
    v  &= ~(0xF << (4 * (PIN&7)));         // Select alt func 0
    JLINK_MEM_WriteU32(GPIO_BASE + AFRL_OFF + ((PIN>>3)<<2), v);
    }




/*********************************************************************
*
*       OnTraceStart()
*
*  Function description
*    If present, called right before trace is started.
*    Used to initialize MCU specific trace related things like configuring the trace pins for alternate function.
*
*  Return value
*    >= 0:  O.K.
*     < 0:  Error
*
*  Notes
*    (1) May use high-level API functions like JLINK_MEM_ etc.
*    (2) Should not call JLINK_TARGET_Halt(). Can rely on target being halted when entering this function
*/
int OnTraceStart(void) {
  U32 RCC_BASE;
  U32 GPIOB_BASE;
  U32 GPIOC_BASE;
  U32 GPIOD_BASE;
  U32 DBGMCU_BASE;
  U32 RCC_AHB2ENR_OFF;
  U32 RCC_CFGR1_OFF;
  U32 DBGMCU_CR_OFF;
  U32 RCC_AHB2ENR_ADDR;
  U32 RCC_CFGR1_ADDR;
  U32 DBGMCU_CR_ADDR;
  U32 iTCLK;
  U32 iTD0;
  U32 iTD1;
  U32 iTD2;
  U32 iTD3;
  U32 v;
  U32 PortWidth;
  //
  // Adjust sampling point of trace pin (Optional: not needed for this cpu)
  //
  //JLINK_ExecCommand("TraceSampleAdjust TD=2000"); 
  //
  // Set Trace Portwidth(Optional): Default 4 Pin Trace, other possibilities: 1, 2, 4
  //
  //JLINK_TRACE_PortWidth = 4;
  //
  //   PB5 => TCLK
  //   PB6 => TD0
  //   PB7 => TD1
  //   PD2 => TD2
  //   PC12 => TD3
  //
  //   All AF0
  //
  // Init register addresses
  //
  RCC_BASE           = 0x44020C00;
  GPIOB_BASE         = 0x42020400;
  GPIOC_BASE         = 0x42020800;
  GPIOD_BASE         = 0x42020C00;
  DBGMCU_BASE        = 0x44024000;
  RCC_AHB2ENR_OFF    = 0x8C;
  RCC_CFGR1_OFF      = 0x1C;
  DBGMCU_CR_OFF      = 0x04;
  JLINK_SYS_Report("Start: Initializing trace pins");
  RCC_AHB2ENR_ADDR   = RCC_BASE + RCC_AHB2ENR_OFF;
  RCC_CFGR1_ADDR     = RCC_BASE + RCC_CFGR1_OFF;
  DBGMCU_CR_ADDR     = DBGMCU_BASE + DBGMCU_CR_OFF;
  iTCLK = 5;
  iTD0  = 6;
  iTD1  = 7;
  iTD2  = 2;
  iTD3  = 12;
  PortWidth = JLINK_TRACE_PortWidth;

  //
  // Init Trace clock and GPIOs
  //
  v  = JLINK_MEM_ReadU32(RCC_AHB2ENR_ADDR);
  v |= 1 << 1;  // Enable clock for GPIOB
  v |= 1 << 2;  // Enable clock for GPIOC
  v |= 1 << 3;  // Enable clock for GPIOD
  JLINK_MEM_WriteU32(RCC_AHB2ENR_ADDR, v); 
  v  = JLINK_MEM_ReadU32(RCC_CFGR1_ADDR);
  v |= 3 << 0;  // Set PLL1 as source for trace clock
  JLINK_MEM_WriteU32(RCC_CFGR1_ADDR, v); 

  //
  // Setup trace GPIO pins
  //
  SetupTracePin(GPIOB_BASE, iTCLK);
  SetupTracePin(GPIOB_BASE, iTD0);
  if (PortWidth > 1) {
    SetupTracePin(GPIOB_BASE, iTD1);
  }
  if (PortWidth > 2) {
      PortWidth = 3;  // Have to set it here from 4 to 3 as DBUGMCU_CR register expects 0x3 for 4 bit trace which is set below
      SetupTracePin(GPIOD_BASE, iTD2);
      SetupTracePin(GPIOC_BASE, iTD3);
  }

  JLINK_SYS_Report("End: Initializing trace pins");

  //
  // Config DBUGMCU
  //
  v  =  JLINK_MEM_ReadU32(DBGMCU_CR_ADDR);               // Debug MCU enables traceclk (STM32H5 specific)
  v  |= (1 << 5);          // Enable Trace port and clock
  v  |= (1 << 4);          // Enable Trace pins
  v  |= (PortWidth << 6);  // Set portwidth to selected value
  JLINK_MEM_WriteU32(DBGMCU_CR_ADDR, v);

  return 0;
}
